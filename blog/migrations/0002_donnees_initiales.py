# Generated by Django 2.2.3 on 2020-04-26 22:00

import json
from django.db import migrations
from django.core.exceptions import ObjectDoesNotExist
from django.contrib.auth.hashers import make_password


# SQLs liés à la vue des cotisations non libérées
sql_vue_cotisation_non_liberee = \
"""
CREATE OR REPLACE VIEW public.v_cotisation_non_liberee
AS SELECT c.id,
    c.reunion_id,
    c.membre_id,
    c.montant_social,
    c.social_libere,
    c.montant_mission,
    c.mission_libere,
    (not c.social_libere)::int * c.montant_social - coalesce(s.affecte_social, 0) AS reste_cotis_social,
    (not c.mission_libere)::int * c.montant_mission - coalesce(m.affecte_mission, 0) AS reste_cotis_mission
FROM blog_cotisation c
LEFT JOIN ( SELECT a.cotisation_id,
        sum(a.somme) AS affecte_social
        FROM blog_affectationnonlibere a
            JOIN blog_cas c_1 ON a.cas_id = c_1.id
        WHERE c_1.classification::text = 'S'::text
        GROUP BY a.cotisation_id) s ON s.cotisation_id = c.id
LEFT JOIN ( SELECT a.cotisation_id,
        sum(a.somme) AS affecte_mission
        FROM blog_affectationnonlibere a
            JOIN blog_cas c_1 ON a.cas_id = c_1.id
        WHERE c_1.classification::text = 'M'::text
        GROUP BY a.cotisation_id) m ON m.cotisation_id = c.id
WHERE NOT (c.mission_libere AND c.social_libere);
"""

sql_supprime_vue = "DROP VIEW public.v_cotisation_non_liberee;"


# Migrations des natures de besoins
def cree_natures(apps, schema_editor):
    """
    Fonction de chargement des natures de besoins
    """
    NatureBesoin = apps.get_model("blog", "NatureBesoin")
    db_alias = schema_editor.connection.alias
    NatureBesoin.objects.using(db_alias).bulk_create([
        NatureBesoin(libelle="Santé", classification="S"),
        NatureBesoin(libelle="Subsistance", classification="S"),
        NatureBesoin(libelle="Scolarité", classification="S"),
        NatureBesoin(libelle="Activité commerciale", classification="S"),
        NatureBesoin(libelle="Evangélisation", classification="M"),
        NatureBesoin(libelle="Construction", classification="M"),
        NatureBesoin(libelle="Soutien missionnaire", classification="M"),
        NatureBesoin(libelle="Implantation", classification="M"),
        NatureBesoin(libelle="Achat d'équipement", classification="M"),
        NatureBesoin(libelle="Formation", classification="M"),
    ])

def supprime_natures(apps, schema_editor):
    """
    Fonction de suppression des natures de besoins
    """
    NatureBesoin = apps.get_model("blog", "NatureBesoin")
    db_alias = schema_editor.connection.alias
    NatureBesoin.objects.using(db_alias).filter(libelle="Santé", classification="S").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Subsistance", classification="S").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Scolarité", classification="S").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Activité commerciale", classification="S").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Evangélisation", classification="M").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Construction", classification="M").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Soutien missionnaire", classification="M").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Implantation", classification="M").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Achat d'équipement", classification="M").delete()
    NatureBesoin.objects.using(db_alias).filter(libelle="Formation", classification="M").delete()


# Migrations des communautés
def cree_eglises(apps, schema_editor):
    """
    Fonction de chargement de la liste initiale des communautés
    Cette liste est lue depuis un fichier json
    """
    nom_fichier = "blog/migrations/liste_communautes.json"
    with open(nom_fichier, "r", encoding="utf-8") as fichier:
        donnees = json.load(fichier)

    # Ecriture dans la table des communautés
    Communaute = apps.get_model("blog", "Communaute")
    db_alias = schema_editor.connection.alias
    communautes = [ Communaute(nom=c["nom"], nom_long=c["nom_long"]) for c in donnees ]
    Communaute.objects.using(db_alias).bulk_create(communautes)

def supprime_eglises(apps, schema_editor):
    """
    Fonction de suppression de la liste initiale des communautés
    Cette liste est lue depuis un fichier json
    """
    nom_fichier = "blog/migrations/liste_communautes.json"
    with open(nom_fichier, "r", encoding="utf-8") as fichier:
        donnees = json.load(fichier)

    # Suppression des communautés de la liste
    noms = [ c["nom"] for c in donnees ]
    Communaute = apps.get_model("blog", "Communaute")
    db_alias = schema_editor.connection.alias
    Communaute.objects.using(db_alias).filter(nom__in=noms).delete()


# Migrations des membres
def cree_membres(apps, schema_editor):
    """
    Fonction de chargement de la liste initiale des membres de Providence
    Cette liste est lue depuis un fichier json
    """
    nom_fichier = "blog/migrations/liste_membres.json"
    with open(nom_fichier, "r", encoding="utf-8") as fichier:
        donnees = json.load(fichier)

    # Ecriture dans la table des communautés
    ProvUser = apps.get_model("blog", "ProvUser")
    Communaute = apps.get_model("blog", "Communaute")
    db_alias = schema_editor.connection.alias
    membres = [] # [ Communaute(nom=c["nom"], nom_long=c["nom_long"]) for c in donnees ]
    for donnee_membre in donnees:
        communaute = None
        nom_communaute = donnee_membre["communaute"]
        if nom_communaute:
            try:
                communaute = Communaute.objects.get(nom=nom_communaute)
            except ObjectDoesNotExist:
                pass

        membres.append(ProvUser(
            username=donnee_membre["username"],
            first_name=donnee_membre["prenoms"],
            last_name=donnee_membre["nom"],
            email=donnee_membre["email"],
            password=make_password("admin123"),
            is_staff=True,
            is_active=True,
            is_superuser=donnee_membre["superuser"],
            sexe=donnee_membre["sexe"],
            telephone1=donnee_membre["tel1"],
            telephone2=donnee_membre["tel2"],
            adresse=donnee_membre["adresse"],
            communaute=communaute,
            eglise_locale=donnee_membre["eglise_locale"],
            activite=donnee_membre["activite"],
            profession=donnee_membre["profession"],
            cotisation_social=donnee_membre["montant_social"],
            cotisation_mission=donnee_membre["montant_mission"],
            personne_physique=donnee_membre["personne"],
            peut_cotiser=donnee_membre["cotisation"],
        ))

    ProvUser.objects.using(db_alias).bulk_create(membres)

def supprime_membres(apps, schema_editor):
    """
    Fonction de suppression de la liste initiale des membres de Providence
    Cette liste est lue depuis un fichier json
    """
    nom_fichier = "blog/migrations/liste_membres.json"
    with open(nom_fichier, "r", encoding="utf-8") as fichier:
        donnees = json.load(fichier)

    # Suppression des membres de la liste en se basant sur leur username (login)
    usernames = [ m["username"] for m in donnees ]
    ProvUser = apps.get_model("blog", "ProvUser")
    db_alias = schema_editor.connection.alias
    ProvUser.objects.using(db_alias).filter(username__in=usernames).delete()


# Exécutions des migrations
class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(sql_vue_cotisation_non_liberee, reverse_sql=sql_supprime_vue),
        migrations.RunPython(cree_natures, supprime_natures),
        migrations.RunPython(cree_eglises, supprime_eglises),
        migrations.RunPython(cree_membres, supprime_membres),
    ]
