# Generated by Django 2.2.3 on 2020-05-10 15:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='VueCotisationNonLiberee',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='identifiant')),
                ('montant_social', models.PositiveIntegerField(blank=True, null=True)),
                ('social_libere', models.BooleanField(blank=True, null=True, verbose_name='montant social libéré ?')),
                ('montant_mission', models.PositiveIntegerField(blank=True, null=True)),
                ('mission_libere', models.BooleanField(blank=True, null=True, verbose_name='montant mission libéré ?')),
                ('reste_cotis_social', models.IntegerField(blank=True, null=True, verbose_name='reste social')),
                ('reste_cotis_mission', models.IntegerField(blank=True, null=True, verbose_name='reste mission')),
            ],
            options={
                'verbose_name': 'cotisation du mois non libérée',
                'verbose_name_plural': 'cotisations du mois non libérées',
                'db_table': 'v_cotisation_non_liberee',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProvUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sexe', models.CharField(choices=[('F', 'Féminin'), ('M', 'Masculin'), ('N', 'Non applicable')], max_length=1, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='date de naissance')),
                ('telephone1', models.CharField(blank=True, default='', max_length=32, null=True, verbose_name='téléphone 1')),
                ('telephone2', models.CharField(blank=True, default='', max_length=32, null=True, verbose_name='téléphone 2')),
                ('adresse', models.CharField(blank=True, default='', max_length=250, null=True, verbose_name='adresse géographique')),
                ('date_adhesion', models.DateField(blank=True, null=True, verbose_name="date d'adhésion")),
                ('eglise_locale', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name='église locale')),
                ('activite', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name="secteur d'activité")),
                ('profession', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('cotisation_social', models.PositiveIntegerField(blank=True, null=True, verbose_name='montant contribution social')),
                ('cotisation_mission', models.PositiveIntegerField(blank=True, null=True, verbose_name='montant contribution mission')),
                ('personne_physique', models.BooleanField(default=True)),
                ('peut_cotiser', models.BooleanField(default=True, verbose_name='peut cotiser')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Beneficiaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=64, null=True)),
                ('prenoms', models.CharField(blank=True, max_length=64, null=True, verbose_name='prénoms')),
                ('sexe', models.CharField(blank=True, choices=[('F', 'Féminin'), ('M', 'Masculin'), ('N', 'Non applicable')], max_length=1, null=True)),
                ('eglise_locale', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name='église locale')),
                ('situation_matrimoniale', models.CharField(blank=True, choices=[('C', 'Célibataire'), ('M', 'Marié(e)'), ('D', 'Divorcé(e)'), ('V', 'Veuve / Veuf)')], max_length=1, null=True)),
                ('profession', models.CharField(blank=True, max_length=64, null=True)),
                ('fonction', models.CharField(blank=True, max_length=64, null=True)),
                ('nb_enfants', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="nombre d'enfants")),
                ('anciennete_foi', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='ancienneté dans la foi')),
            ],
            options={
                'verbose_name': 'bénéficiaire',
            },
        ),
        migrations.CreateModel(
            name='Communaute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=128, unique=True, verbose_name='nom court')),
                ('nom_long', models.CharField(blank=True, max_length=128, null=True, verbose_name='nom long')),
            ],
            options={
                'verbose_name': 'communauté',
                'ordering': ('nom',),
            },
        ),
        migrations.CreateModel(
            name='NatureBesoin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('libelle', models.CharField(max_length=20, verbose_name='libellé')),
                ('classification', models.CharField(choices=[('S', 'Social'), ('M', 'Mission')], max_length=1, verbose_name='classification')),
            ],
            options={
                'verbose_name': 'nature de besoin',
                'verbose_name_plural': 'natures de besoins',
                'ordering': ('classification', 'libelle'),
            },
        ),
        migrations.CreateModel(
            name='Reunion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reunion', models.DateField(verbose_name='date de la réunion')),
                ('lieu_reunion', models.CharField(blank=True, max_length=128, null=True, verbose_name='lieu de la réunion')),
                ('compte_rendu', models.TextField(blank=True, null=True, verbose_name='compte-rendu de la réunion')),
                ('liste_presence', models.ManyToManyField(blank=True, related_name='presences', to=settings.AUTH_USER_MODEL, verbose_name='membres présents')),
                ('membre_hote', models.ForeignKey(limit_choices_to={'personne_physique': True}, on_delete=django.db.models.deletion.CASCADE, related_name='reunions', to=settings.AUTH_USER_MODEL, verbose_name='membre hôte')),
            ],
            options={
                'verbose_name': 'réunion',
                'ordering': ('-date_reunion',),
            },
        ),
        migrations.CreateModel(
            name='Cotisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_social', models.PositiveIntegerField(default=0)),
                ('social_libere', models.BooleanField(default=False, verbose_name='montant social libéré ?')),
                ('montant_mission', models.PositiveIntegerField(default=0)),
                ('mission_libere', models.BooleanField(default=False, verbose_name='montant mission libéré ?')),
                ('membre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='membre')),
                ('reunion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cotisations', to='blog.Reunion', verbose_name='réunion')),
            ],
            options={
                'verbose_name': 'cotisation du mois',
                'verbose_name_plural': 'cotisations du mois',
            },
        ),
        migrations.CreateModel(
            name='Cas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=64, null=True)),
                ('prenoms', models.CharField(blank=True, max_length=64, null=True, verbose_name='prénoms')),
                ('sexe', models.CharField(blank=True, choices=[('F', 'Féminin'), ('M', 'Masculin'), ('N', 'Non applicable')], max_length=1, null=True)),
                ('eglise_locale', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name='église locale')),
                ('situation_matrimoniale', models.CharField(blank=True, choices=[('C', 'Célibataire'), ('M', 'Marié(e)'), ('D', 'Divorcé(e)'), ('V', 'Veuve / Veuf)')], max_length=1, null=True)),
                ('profession', models.CharField(blank=True, max_length=64, null=True)),
                ('fonction', models.CharField(blank=True, max_length=64, null=True)),
                ('nb_enfants', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="nombre d'enfants")),
                ('anciennete_foi', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='ancienneté dans la foi')),
                ('montant_sollicite', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='montant solllicité')),
                ('montant_alloue', models.PositiveIntegerField(blank=True, null=True, verbose_name='montant alloué')),
                ('sollicitation_externe', models.PositiveIntegerField(blank=True, null=True, verbose_name='solllicitation hors Providence')),
                ('classification', models.CharField(choices=[('S', 'Social'), ('M', 'Mission')], default='S', max_length=1, verbose_name='classification du cas')),
                ('urgence', models.BooleanField(default=False, verbose_name="cas d'urgence ?")),
                ('description', models.TextField(blank=True, null=True, verbose_name='exposé du cas')),
                ('suivi', models.CharField(blank=True, choices=[('O', 'Ouvert'), ('C', 'Clos'), ('R', 'Reconduit'), ('P', 'Reporté'), ('A', 'Annulé')], default='O', max_length=1, null=True, verbose_name='suivi du cas')),
                ('don_remis', models.CharField(blank=True, choices=[('O', 'Oui'), ('N', 'Non'), ('P', 'Partiellement')], max_length=1, null=True, verbose_name='don remis ?')),
                ('compte_rendu', models.TextField(blank=True, null=True, verbose_name='compte-rendu du cas')),
                ('beneficiaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cas_beneficiaire', to='blog.Beneficiaire', verbose_name='bénéficiaire')),
                ('communaute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Communaute', verbose_name='communauté fréquentée')),
                ('nature', models.ManyToManyField(blank=True, to='blog.NatureBesoin', verbose_name='nature(s) du cas')),
                ('reunion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cas_reunion', to='blog.Reunion', verbose_name='réunion')),
                ('soumis_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'cas',
                'verbose_name_plural': 'cas',
                'unique_together': {('reunion', 'beneficiaire')},
            },
        ),
        migrations.AddField(
            model_name='beneficiaire',
            name='communaute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Communaute', verbose_name='communauté fréquentée'),
        ),
        migrations.CreateModel(
            name='AffectationNonLibere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('somme', models.PositiveIntegerField(verbose_name='montant à récupérer')),
                ('cas', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affectation_cas', to='blog.Cas')),
                ('collecteur', models.ForeignKey(limit_choices_to={'personne_physique': True}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='collecteurs', to=settings.AUTH_USER_MODEL, verbose_name='Collecté par')),
                ('cotisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Cotisation', verbose_name='cotisation de')),
                ('reunion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affectations', to='blog.Reunion', verbose_name='réunion')),
            ],
            options={
                'verbose_name': 'affectation de cotisation non libérée',
                'verbose_name_plural': 'affectations des cotisations non libérées',
            },
        ),
        migrations.AddField(
            model_name='provuser',
            name='communaute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Communaute', verbose_name='église fréquentée'),
        ),
        migrations.AddField(
            model_name='provuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='provuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Membre',
            fields=[
            ],
            options={
                'verbose_name': 'membre',
                'ordering': ('last_name', 'first_name'),
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('blog.provuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
